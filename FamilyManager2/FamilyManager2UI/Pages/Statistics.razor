@page "/Statistics"
@page "/Stats"
@attribute [Authorize]
@inject IRestClient restClient
@using Models
@using FamilyManager2UI.WebClient

@if (families == null) {
    <p>
        <em> Loading ...</em>
    </p>
} else if (!families.Any()) {
    <p>
        <em> No families in the system yet</em>
    </p>
} else {
    <div class="card mb-5">
        <h1 class="card-header mb-3">Statistics</h1>
        <div class="card-body row">
            <div class="col-xl-3 col-md-12">
                <p>Total number of families: <strong>@families.Count()</strong></p>
                <p>Total number of adults: <strong>@people.Count(p => p is Adult)</strong></p>
                <p>Total number of children: <strong>@people.Count(p => p is Child)</strong></p>
                <p>Total number of pets: <strong>@families.Sum(f => f.Pets.Count())</strong></p>
            </div>
            <div class="col-xl-4 col-md-12">
                <p>Average number of people per family: <strong>@Math.Round(families.Average(f => f.Adults.Count() + f.Children.Count()), 2)</strong></p>
                <p>Average number of adults per family: <strong>@Math.Round(families.Average(f => f.Adults.Count()), 2)</strong></p>
                <p>Average number of children per family: <strong>@Math.Round(families.Average(f => f.Children.Count()), 2)</strong></p>
                <p>Average number of pets per family: <strong>@Math.Round(families.Average(f => f.Pets.Count() + f.Children.Sum(c => c.Pets.Count)), 2)</strong></p>
            </div>
            <div class="col-xl-5 col-md-12">
                <p>Total number of families with single parents: <strong>@families.Count(f => f.Adults.Count() == 1)</strong></p>
                <p>Total number of people with the last name 'Mcclure': <strong>@people.Count(p => p.LastName.Equals("Mcclure"))</strong></p>
                <p>Total number of teachers: <strong>@people.Count(p => p is Adult adult && adult.Job.JobTitle.Equals("Teacher"))</strong></p>
                <p>Total number of children with an interest in drawing: <strong>@people.Count(p => p is Child child && child.Interests.Any(i => i.Type.Equals("Drawing")))</strong></p>
            </div>
        </div>
    </div>

    <div class="container-fluid mb-5">
        <div class="row">
            <div class="col-lg-6 col-sm-12">
                <h3 class="text-center">Distribution of number of children</h3>
                <RadzenChart>
                    <RadzenBarSeries Data="@families" CategoryProperty="StreetName" ValueProperty="Children.Count"/>
                    <RadzenValueAxis Min="0" Step="1">
                        <RadzenGridLines Visible="true"/>
                        <RadzenAxisTitle Text="# of children"/>
                    </RadzenValueAxis>
                    <RadzenBarOptions Radius="8"/>
                    <RadzenChartTooltipOptions Visible="false"/>
                    <RadzenLegend Visible="false"/>
                </RadzenChart>
            </div>
            <div class="col-lg-6 col-sm-12">
                <h3 class="text-center">Distribution of pets</h3>
                <RadzenChart>
                    <RadzenBarSeries Data="@families" CategoryProperty="StreetName" ValueProperty="Pets.Count"/>
                    <RadzenValueAxis Min="0" Step="1">
                        <RadzenGridLines Visible="true"/>
                        <RadzenAxisTitle Text="# of pets"/>
                    </RadzenValueAxis>
                    <RadzenBarOptions Radius="8"/>
                    <RadzenChartTooltipOptions Visible="false"/>
                    <RadzenLegend Visible="false"/>
                </RadzenChart>
            </div>
        </div>
    </div>

    <div class="container-fluid mb-5">
        <div class="row mb-5">
            <div class="col-lg-6 col-sm-12">
                <h3 class="text-center">Distribution of sex</h3>
                <RadzenChart>
                    <RadzenPieSeries Data="@sex" Title="Amount" CategoryProperty="Name" ValueProperty="Count"/>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                </RadzenChart>
            </div>
            <div class="col-lg-6 col-sm-12">
                <h3 class="text-center">Age distribution</h3>
                <RadzenChart>
                    <RadzenPieSeries Data="@ages" Title="Amount" CategoryProperty="Name" ValueProperty="Count"/>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                </RadzenChart>
            </div>
        </div>
        <div class="row mb-5">
            <div class="col-lg-6 col-sm-12">
                <h3 class="text-center">Distribution of hair color</h3>
                <RadzenChart>
                    <RadzenPieSeries Data="@hairColors" Title="Amount" CategoryProperty="Name" ValueProperty="Count"/>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                </RadzenChart>
            </div>
            <div class="col-lg-6 col-sm-12">
                <h3 class="text-center">Distribution of eye color</h3>
                <RadzenChart>
                    <RadzenPieSeries Data="@eyeColors" Title="Amount" CategoryProperty="Name" ValueProperty="Count"/>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                </RadzenChart>
            </div>
        </div>
        <div class="row mb-5">
            <div class="col-lg-6 col-sm-12">
                <h3 class="text-center">Height distribution (cm)</h3>
                <RadzenChart>
                    <RadzenPieSeries Data="@heights" Title="Amount" CategoryProperty="Name" ValueProperty="Count"/>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                </RadzenChart>
            </div>
            <div class="col-lg-6 col-sm-12">
                <h3 class="text-center">Weight distribution (kg)</h3>
                <RadzenChart>
                    <RadzenPieSeries Data="@weights" Title="Amount" CategoryProperty="Name" ValueProperty="Count"/>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                </RadzenChart>
            </div>
        </div>
    </div>
}

@code {
    private IList<Family> families;
    private IList<Person> people;
    
    private IList<ChartData> sex;
    private IList<ChartData> ages;
    private IList<ChartData> hairColors;
    private IList<ChartData> eyeColors;
    private IList<ChartData> heights;
    private IList<ChartData> weights;

    private struct ChartData {
        public string Name { get; set; }
        public int Count { get; set; }
    }

    protected override async Task OnInitializedAsync() {
        families = await restClient.GetAsync<Family>();

        people = new List<Person>();
        foreach (var fam in families) {
            foreach (var person in fam.Adults) {
                people.Add(person);
            }
            foreach (var child in fam.Children) {
                people.Add(child);
            }
        }
        
        sex = new List<ChartData>();
        sex.Add(new ChartData() {
            Name = "Male",
            Count = people.Count(p => p.Sex.Equals("M"))
        });
        sex.Add(new ChartData() {
            Name = "Female",
            Count = people.Count(p => p.Sex.Equals("F"))
        });

        ages = new List<ChartData>();
        ages.Add(new ChartData() {
            Name = "<10",
            Count = people.Count(p => p.Age < 10)
        });
        ages.Add(new ChartData() {
            Name = "10-18",
            Count = people.Count(p => p.Age is >= 10 and < 19)
        });
        ages.Add(new ChartData() {
            Name = "19-27",
            Count = people.Count(p => p.Age is >= 19 and < 28)
        });
        ages.Add(new ChartData() {
            Name = "28-40",
            Count = people.Count(p => p.Age is >= 28 and < 41)
        });
        ages.Add(new ChartData() {
            Name = "41-55",
            Count = people.Count(p => p.Age is >= 41 and < 56)
        });
        ages.Add(new ChartData() {
            Name = ">55",
            Count = people.Count(p => p.Age > 55)
        });
        
        hairColors = new List<ChartData>();
        foreach(var color in await restClient.GetColorAsync("haircolors")) {
            hairColors.Add(new ChartData() {
                Name = color,
                Count = people.Count(p => p.HairColor.Equals(color))
            });
        }
        
        eyeColors = new List<ChartData>();
        foreach (var color in await restClient.GetColorAsync("eyecolors")) {
            eyeColors.Add(new ChartData() {
                Name = color,
                Count = people.Count(p => p.EyeColor.Equals(color))
            });
        }
        
        heights = new List<ChartData>();
        heights.Add(new ChartData() {
            Name = "<130",
            Count = people.Count(p => p.Height < 130)
        });
        heights.Add(new ChartData() {
            Name = "130-145",
            Count = people.Count(p => p.Height is >= 130 and < 146)
        });
        heights.Add(new ChartData() {
            Name = "146-160",
            Count = people.Count(p => p.Height is >= 146 and < 161)
        });
        heights.Add(new ChartData() {
            Name = "161-175",
            Count = people.Count(p => p.Height is >= 161 and < 176)
        });
        heights.Add(new ChartData() {
            Name = ">175",
            Count = people.Count(p => p.Height is > 175)
        });
        
        weights = new List<ChartData>();
        weights.Add(new ChartData() {
            Name = "<35",
            Count = people.Count(p => p.Weight < 35)
        });
        weights.Add(new ChartData() {
            Name = "35-49",
            Count = people.Count(p => p.Weight is <= 35 and < 50)
        });
        weights.Add(new ChartData() {
            Name = "50-65",
            Count = people.Count(p => p.Weight is >= 50 and < 66)
        });
        weights.Add(new ChartData() {
            Name = "66-80",
            Count = people.Count(p => p.Weight is >= 66 and < 81)
        });
        weights.Add(new ChartData() {
            Name = "81-95",
            Count = people.Count(p => p.Weight is >= 61 and < 96)
        });
        weights.Add(new ChartData() {
            Name = ">95",
            Count = people.Count(p => p.Weight > 95)
        });
    }
}